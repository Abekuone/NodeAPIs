// Importation des dÃ©pendances
const express = require('express');
const createError = require('http-errors');
const morgan = require('morgan');
require('dotenv').config();
var cors = require('cors');

// Configuration du serveur Express :
// Creation d'une instance d'Express en appelant express().
// Les middlewares express.json(), express.urlencoded() et morgan
// sont utilisÃ©s pour gÃ©rer les requÃªtes HTTP, le formatage des donnÃ©es et la journalisation.
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(morgan('dev'));

app.use('/', require("./root/fils/index.js"));

// Route d'accueil : Une route GET pour l'URL racine '/'. 
app.get('/', async (req, res, next) => {
  res.send({ message: 'Bienvenu sur la page d\'accueil de notre API' });
});


app.use((req, res, next) => {
  next(createError.NotFound());
});

app.use((err, req, res, next) => {
  res.status(err.status || 500);
  res.send({
    status: err.status || 500,
    message: err.message,
  });
});

/* DÃ©marrage du serveur
 ConfigurÃ© pour Ã©couter sur un port spÃ©cifiÃ© dans la variable
 d'environnement PORT ou sur le port 3000 par dÃ©faut.
 Message affichÃ© dans la console pour indiquer
 que le serveur est prÃªt Ã  Ã©couter les requÃªtes.
*/
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`ðŸš€ @ http://localhost:${PORT}`));
